name: üöÄ Deploy to VPS (Smart + Cached + Dynamic Memory)

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy via SSH
    runs-on: ubuntu-latest

    env:
      DEBUG: true # Set to true for verbose SSH logging

    steps:
      # ======================================================
      # 1Ô∏è‚É£ CHECKOUT REPOSITORY
      # ======================================================
      - name: ‚è≥ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for clean git operations

      # ======================================================
      # 2Ô∏è‚É£ SETUP NODE.JS + PNPM + CACHE
      # ======================================================
      - name: üß∞ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: ‚ö° Cache PNPM Store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: üì¶ Install PNPM
        run: |
          npm install -g pnpm
          echo "‚úÖ PNPM version: $(pnpm --version)"

      # ======================================================
      # 3Ô∏è‚É£ SETUP SSH
      # ======================================================
      - name: üîê Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # ======================================================
      # 4Ô∏è‚É£ DEPLOY TO VPS
      # ======================================================
      - name: üöÄ Deploy to VPS
        env:
          VPS_USER: ${{ secrets.USER }}
          VPS_HOST: ${{ secrets.QUARK_VPS_HOST }}
          VPS_PORT: ${{ secrets.QUARK_VPS_PORT }}
          GIT_AUTH_TOKEN: ${{ secrets.GIT_AUTH_TOKEN }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          DEBUG: ${{ env.DEBUG }}
          REPO_SLUG: ${{ github.repository }}
        run: |
          echo "üåç Connecting to VPS: $VPS_HOST:$VPS_PORT as $VPS_USER"
          echo "üìÇ Target Path: $DEPLOY_PATH"

          if [ "$DEBUG" = "true" ]; then
            echo "üß© DEBUG MODE ENABLED ‚Äî will print commands as they execute"
            set -x
          fi

          ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST -p $VPS_PORT "
            set -e

            echo 'üñ•Ô∏è Connected to:' \$(hostname)
            echo 'üì¶ Starting deployment in:' $DEPLOY_PATH

            # ================================
            # CHECK OR CREATE DEPLOYMENT DIRECTORY
            # ================================
            if [ ! -d '$DEPLOY_PATH' ]; then
              echo 'üìÅ Directory not found ‚Äî creating: $DEPLOY_PATH'
              mkdir -p '$DEPLOY_PATH'
              echo 'üÜï New deployment directory created.'
            fi
            cd '$DEPLOY_PATH'

            # ================================
            # GIT OPERATIONS
            # ================================
            echo 'üîÑ Updating repository...'
            if [ ! -d '.git' ]; then
              echo '‚ö†Ô∏è .git folder missing ‚Äî cloning repository fresh...'

              if [ -z '${GIT_AUTH_TOKEN}' ]; then
                echo '‚ùå ERROR: GIT_AUTH_TOKEN not set or invalid. Check GitHub Secrets.'
                exit 1
              fi

              git clone https://x-access-token:${GIT_AUTH_TOKEN}@github.com/${REPO_SLUG}.git .
            else
              git fetch origin master
              git reset --hard origin/master
            fi

            # ================================
            # DEPENDENCIES INSTALL
            # ================================
            echo 'üì• Installing dependencies with PNPM...'
            pnpm install --frozen-lockfile

            # ================================
            # BUILD (Dynamic Memory)
            # ================================
            echo '‚öôÔ∏è Preparing to build... calculating memory limits.'
            TOTAL_MEM=\$(free -m | awk '/^Mem:/{print \$2}')
            BUILD_MEM=\$((TOTAL_MEM * 75 / 100))
            export NODE_OPTIONS=\"--max-old-space-size=\$BUILD_MEM\"

            echo \"üß† Total Memory: \${TOTAL_MEM}MB | Allocating: \${BUILD_MEM}MB for Node build\"
            echo 'üèóÔ∏è Building project...'
            pnpm run build

            # ================================
            # PM2 DEPLOYMENT
            # ================================
            echo 'üîÅ Restarting PM2 service...'
            pm2 startOrRestart ecosystem.config.js --env production

            # ================================
            # SUCCESS MESSAGE
            # ================================
            echo '‚úÖ Deployment completed successfully!'
            echo 'üìÖ Finished at:' \$(date)
          "

          if [ "$DEBUG" = "true" ]; then
            set +x
            echo "üß© DEBUG MODE DISABLED ‚Äî end of logs"
          fi
